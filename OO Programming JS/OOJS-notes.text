Sections
1) Scopes
2) Closures
3) The 'this' keyword
4) Prototype Chains
5) Object Decorator Pattern
6) Functional Classes
7) Prototypal Classes
8) Pseudoclassical Patterns
9) Superclass and Subclasses
10) Pseudoclassical Subclasses

******************
/**** Scopes ****/
******************
Lexical scope: distinct areas in your code where you can access variables. A new lexical scope is created every time you declare a function. Inner lexical scopes can access variables defined in the scope at hand and variables defined in outer lexical scopes, however, outer lexical scopes cannot access variables from inner lexical scopes.

variables w/o var are assigned to the global scope, never do this!
e.g. someVariable = 5; <-- missing var, let, const

Remember, only functions create new scopes, not the bodies of loops, if statements, etc.

Execution contexts: aka in-memory scopes, differ from lexical scopes, execution contexts are built as the code runs and are created every time you run a function. For each lexical scope, there may be many execution contexts/in-memory scopes if a function is invoked many times. Execution contexts store variables and their values for a given function invocation.

Remember, lexical scopes are created during function declarations, whereas execution contexts/in-memory scopes are created during function invocations. If a function is run multiple times, the lexical scope is constant but each execution context/in-memory scope is tied to each instance of the run function.

In-memory objects: different than execution contexts/in-memory scopes, which are created only when a function runs. In-memory objects can be created whenever with whatever key value pairs you want. The main similarity is that execution contexts and in-memory objects store variables and associated values.

********************
/**** Closures ****/
********************
Closure is any private variables/values/functions defined in a function/inner lexical scope that remain available in an outer scope after that function runs. Contexts/scopes for functions will always be created as a child of the context/scope that it was defined within, thus where a function is defined determines lexical scope and the variables it has access to.

3 techniques to retain access to an inner function after its outer function that created it has been called:
  1) setTimeout
  2) returning the inner function when the outer function is invoked
  3) saving the inner function to a global variable

******************************
/**** the 'this' keyword ****/
******************************
Only 2 major differences between a regular parameter and the parameter 'this'.
  1) you don't get to pick the name of the parameter this, it's always 'this'
  2) you bind values to 'this' a bit differently from how you bind values to other parameters

'this' is an identifier that gets a value bound to it, much like a variable. 'this' gets bound to objects.

example:
    var obj = {
      fn: function(a,b) {
        log(this);
      }
    };

    obj.fn(3,4); <--where 'this' is determined!

    The object that a function/method is looked up upon when it's being invoked is the object the keyword 'this' is bound to. In the case above, obj looks up fn and invokes fn, so 'this' inside fn refers to obj, the object 'left of the dot'. The 'left of the dot/brackets' concept applies to 90% of situations when determining what 'this' is bound to. Remember, it's the object left of the dot/bracket during the method/function's invocation that matters, not where the method/function is defined or declared.

Can override 'this' binding with apply, call, or bind methods of Function.prototype.
example:
r.method.call(y,g,b) <-- y is the object 'this' is bound to, NOT r

Need to be careful with callbacks (functions passed to other functions as arguments) because they can change what 'this' refers to

  e.g. setTimeout(r.method, 1000) <-- 'this' refers to global scope based on how setTimeout invokes callbacks. r.method is simply a function reference, but r is not being referenced at time of method's actual invocation.

To preserve 'this' use an anonymous function wrapper (other ways are mentioned in the js garden notes also).

  e.g. setTimeout( () => { r.method() },1000 ); <--preserves 'this' within method being bound to r since object r looks up method at the time of method's invocation.

When 'this' is defined in a function used as a constructor, 'this' gets bound to an entirely new object that gets created automatically.
  e.g. new r.method(g,b); <-- instance of r.method is a new object bound to 'this'
'new' keyword used in pseudoclassical instantiation patterns for objects

****************************
/**** Prototype Chains ****/
****************************
Prototype chains allow us to create objects that inherit properties from other objects without forcing us to copy properties one from object to another.

example:
    var gold = {a:1};
    var rose = Object.create(gold); <--creates an ongoing lookup-time delegation between gold and rose objects. Should a property lookup fail for rose, it'll look to gold, its prototype, to see if the property exists. Can see what an object's prototype is via objectName.__proto__

Top-level object is Object.prototype, it's the last place where property lookups will take place in case of failed property lookups on child objects.

object.constructor will traverse the prototype chain looking for the constructor property, which points to the function that serves as the constructor for the object at hand. For most objects, the constructor property will point to Function Object() {...} that's part of Object.prototype. e.g. above, rose's prototype is gold, but its constructor points to Function Object on Object.prototype.

For Array.prototype, its prototype is still Object.prototype, but Array.prototype has its own constructor property that points to Function Array() {...} just how Object.prototype has its own constructor property, thus array.constructor will point to Function Array() for most arrays

************************************
/**** Object Decorator Pattern ****/
************************************
Importance of refactoring repeated code:
1) Consolidate code, refactoring reduces the amount of code you need to edit should you want to make changes to your app later
2) Refactoring allows you to take numerous actions at once if those actions can be replicated on multiple variables

Decorators take objects as inputs and add/manipulate object properties.

example of decorator functions:
  library w/ decorator function:
    var carlike = function(obj, loc) {
      obj.loc = loc;
      obj.move = function() {
        obj.loc++;
      };
      return obj; <-- closure variable obj, every time carlike is invoked a new closure scope is created
    };

  program:
    var amy = carlike({}, 1); //establish amy object
    amy.move(); //increase loc value on amy object
    ben = carlike({}, 9); //establish ben object
    ben.move(); //increase loc value on ben object

2 objects made from the same function are still different objects. See notes on scopes and execution contexts above.

******************************
/**** Functional Classes ****/
******************************
Classes build objects they are going to augment. Unlike above, we don't need to pass an object as an argument to decorate it, the class creates the object for us with all the initial properties we need.

Classes are functions/constructors that can create a fleet of similar objects that all conform to roughly the same interface. The class is the notion of the category of things you'd like to build, e.g. cars, and all the entailed code that supports that category, whereas the constructor is simply the function that you use to produce a new instance of that class. Objects that are returned are instances of the class, and calling the constructor function is called instantiating.

  example of constructor for functional instantiation pattern:
    var Car = function(loc) {
      var obj = {loc: loc};
      obj.move = function() {
        obj.loc++;
      };
      return obj;
    };

Results in duplicated methods, e.g. move, for every instance of Car, this is memory/space intensive. Can get around this by declaring move outside of the constructor.

    var Car = function(loc) {
      var obj = {loc: loc};
      obj.move = move;
      return obj;
    };

    var move = function() {
      this.move++;
    };

If you want to have many methods other than move, this process becomes cumbersome. Can get around this by putting methods in a separate object and using extend (from underscore or lodash) within Car to give the created object the necessary methods.

    var Car = function(loc) {
      var obj = {loc: loc};
      extend(obj, Car.methods);
      return obj;
    };

    Car.methods = {
      move: function() {
        this.loc++;
      },
      on: function() {...},
      off: function() {...}
    };

Can add methods property to the Car constructor because functions are just specialized objects and can store their own properties. Invoking a function has no interaction with any of the properties of that function.

******************************
/**** Prototypal Classes ****/
******************************
Use Object.create to delegate properties from a prototype to child objects. Within the Car constructor, obj represents an instance of Car, and obj gets properties delegated to it from its prototype Car.methods. obj first gets created from Object.create and later gets loc added as a default property (loc not part of the prototype Car.methods).

    var Car = function(loc) {
      var obj = Object.create(Car.methods);
      obj.loc = loc;
      return obj;
    };

    Car.methods = {
      move: function() {
        this.loc++;
      },
      on: function() {...},
      off: function() {...}
    };

    //Refactored if only using move method
    var Car = function(loc) {
      var obj = Object.create(Car.prototype);
      obj.loc = loc;
      return obj;
    };
    //prototype is an arbitrary name for the object that stores our methods, there's nothing special about it, it's purely cosmetic
    Car.prototype.move = function() {
      this.loc++;
    };

    The Car function does NOT delegate failed property lookups to Car.prototype/Car.methods, instead it'll delegate to Function.prototype where all functions delegate their property lookups. obj delegates to Car.prototype/Car.methods because we define the prototype in Object.create().

    2 ways to talk about prototypes here:
    VERY different thing to say...
    1) Amy's prototype is Car.prototype.
      amy, made from Car, is an object whose prototype is Car.prototype because Car.prototype was used as an argument for Object.create, e.g. Object.create(Car.prototype). amy will delegate to Car.prototype in the event of a failed property lookup.
    versus...
    2) Car's prototype is Car.prototype.
      The constructor function Car has a property called prototype whose value is an object that stores methods given to obj. All functions come with the prototype property/object in case you want to store add'l values on it. "Car's prototype" can thus refer to Car's prototype property on the function, or the object it refers to during a failed property lookup (most likely Function.prototype).

    Every .prototype property on a function also has a .constructor property which points back to the function it came attached to, e.g. Car.prototype.constructor points back to the Car function, thus Car.prototype.constructor is Car itself. Can use constructor property to figure out which constructor function built a certain object. All instances of a class delegate their failed lookups to their prototype, so they should all report as having the same constructor function.

      e.g. amy.constructor is the Car function. amy delegates failed lookups to Car.prototype, an object that has the constructor property that points to the Car function.
      Thus, amy.constructor === amy.__proto__.constructor

    Can also use amy instanceof Car to verify that Car is amy's constructor, instanceof checks to see if Car exists in amy's prototype chain.


************************************
/**** Pseudoclassical Patterns ****/
************************************


*************************************
/**** Superclass and Subclasses ****/
*************************************


**************************************
/**** Pseudoclassical Subclasses ****/
**************************************
